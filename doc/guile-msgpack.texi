\input texinfo   @c -*-texinfo-*-
@c %**start of header
@documentencoding UTF-8
@settitle MessagePack for GNU Guile
@c %**end of header

@copying
Copyright @copyright{} 2018 Alejandro "HiPhish" Sanchez

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the GNU Free Documentation License, Version 1.3
or any later version published by the Free Software Foundation;
with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
A copy of the license is included in the section entitled "GNU
Free Documentation License".
@end quotation
@end copying

@titlepage
@title MessagePack for GNU Guile
@author Alejandro "HiPhish" Sanchez

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@contents

@ifnottex
@node Top
@top MessagePack

MessagePack is a binary data serialization format.  This means that in-memory
objects like numbers, string, dictionaries or ordered sequences can be
serialized (``packed'') to raw bytes, and deserialized (``unpacked'') to
in-memory objects. This library implements procedures to perform these two
actions in GNU Guile.

@menu
* MessagePack Guide::  The MessagePack format in general
* MessagePack API::    Using MessagePack in GNU Guile
* GNU Free Documentation License::
@end menu
@end ifnottex


@node MessagePack Guide
@chapter MessagePack Guide

From the @uref{https://msgpack.org/,MessagePack website}:

@quotation
MessagePack is an efficient binary serialization format. It lets you exchange
data among multiple languages like JSON. But it's faster and smaller. Small
integers are encoded into a single byte, and typical short strings require only
one extra byte in addition to the strings themselves.
@end quotation

What this means is that we can turn in-memory objects of a process (such as a
Guile REPL instance) into raw bytes, and turn raw bytes into in-memory objects
again. These actions are referred to as ``packing'' and ``unpacking''
respectively, although the technical terms are ``serialization'' and
``deserialization''. Since the format is standardised we can use it to exchange
data between processes written in different programming languages running on
different architectures without issue.

MessagePack is focused on optimising speed and size, hence why it uses a binary
format instead of a text-based one. Serialization formats like JSON and YAML
are easy to read and manually edit by humans, but parsing them is a non-trivial
task. Human-readability is not always a priority: for instance, if we want to
exchange data between two processes for remote procedure calls, that data will
never be read by a human.

@node Motivation
@section Motivation

Suppose we have two processes and we wish to exchange data between them.
Consider the following crude illustration:

@example
+-------------+          Outgoing          +-------------+
|             | -------------------------> |             |
|  Process 1  |                            |  Process 2  |
|             | <------------------------- |             |
+-------------+          Incoming          +-------------+
@end example

The first process wants to send some ``object'' to the second process. The
object can be anything: a number, a string, a boolean value, a list of objects,
a hash table, a time stamp, or any additional type you want. The two processes
do not necessarily have to be the same program, or run on the same machine or
even run at the same time.

The easiest thing to do would be to just dump the in-memory representation of
the object from inside the first process, and feed those raw bytes into the
second process. However, there is no guarantee that the two processes can
understand each other's ``dumped format'', which is why we need some format to
agree on.

The act of turning an in-memory object into raw bytes is generally called
@emph{serialization}, and the act of turning raw bytes into an in-memory object
is called @emph{deserialization}. In MessagePack terminology it is customary to
refer to them as @emph{packing} and @emph{unpacking} respectively, and that is
what we will call them from now on.

MessagePack defines a data serialization format which prefers speed and small
memory sizes, this makes it particularly well suited for inter-process
communication. We could in theory also write the packed object to a file and
pass the file around to other people to look at, but the binary format makes it
hard to read for humans.

@node A Guided Tour
@section A Guided Tour

The easiest way to get acquainted with MessagePack is to try it out. Install
this library, fire up your Guile REPL, then follow along with the code.
Remember that you can always use the @code{,describe} meta command to read the
docstring of a procedure. Let's first import the MessagePack module.

@example
(use-modules (msgpack))
@end example

MessagePack is often abbreviated as ``msgpack'', and this name is used
throughout the library. There a several modules provided, with the topmost
module @code{msgpack} being an ``umbrella module'' which exports everything the
submodules export.

Let us now pack some objects.

@example
(pack 13)
⇒ #vu8(13)

(pack #f)
⇒ #vu8(194)

(pack "Hello world!")
⇒ #vu8(172 72 101 108 108 111 32 119 111 114 108 100 33)

(pack 13 #f "Hello world!")
⇒ #vu8(13 194 172 72 101 108 108 111 32 119 111 114 108 100 33)
@end example

The @code{pack} procedure takes one or more objects and turns them into bytes,
returning a bytevector. We could now write those bytes to an output port to
send them off. As a shorthand the @code{pack-to} procedure takes in a binary
output port, followed by one or more objects to pack, and sends then off
through the port without allocating a bytevector.

@example
(pack-to (current-output-port) "Hello world!")
@end example

The complements to @code{pack} and @code{pack-to} are @code{unpack} and
@code{unpack-from}.

@example
(unpack #vu8(13))
⇒ 13

(unpack #vu8(194))
⇒ #f

(unpack #vu8(172 72 101 108 108 111 32 119 111 114 108 100 33))
⇒ "Hello world!"

(unpack #vu8(13 194 172 72 101 108 108 111 32 119 111 114 108 100 33))
⇒ 13 
⇒ #f
⇒ "Hello world!"

(unpack-from (current-input-port))
@end example

As we can see, just as it was possible to pack multiple values at the same
time, it is also possible to unpack multiple values at the same time. These
four procedures are what you will be using most of the time, they are
documented in detail below, see @ref{Packing} and @ref{Unpacking}.

@node Type system
@section Type system

For the most part packable types have a clear 1:1 mapping to Guile types;
arrays unpack to vectors, dictionaries to hash tables, symbols pack to strings,
vectors and lists to arrays. See the relevant sections for the exact details.

MessagePack defines the @code{nil} type for ``nothingness''. Guile has no
unambiguous type which could be used, so the library defines the new
@code{nothing} type for this purpose. There is only one singleton instance of
this object, which is created though the @code{nothing} procedure.

@example
(use-modules (msgpack nothing))

(pack (nothing))
⇒ #vu8(192)

(unpack #vu8(129))
⇒ #<nothing>

;; Since this is a singleton, all instances are eq?
(eq? (nothing) (unpack #vu8(129)))
⇒ #t
@end example

While the MessagePack type system does define the most common types, there is
always room for extension. This is what the @code{ext} type is for: every
instance is a pair of an integer number and a bytevector. The number is a tag
which specifies the type of the extension and the bytevector carries the actual
data.

MessagePack reserves negative type values for its own extensions, while
non-negative type values are for your custom extensions. Let us assume you want
to pack exact rational numbers without losing the exactness. None of the
default types are suitable, so we will pick extension type zero.

@example
(use-modules (msgpack ext))

(define (rational->ext q)
  (unless (rational? q)
    (throw 'type-error))
  (ext 0
       (pack (numerator   q)
             (denominator q))))

(define (rational->ext e)
  (unless (and (ext? e) (= 0 (ext-type e)))
    (throw 'type-error))
  (let-values (((n d) (unpack (ext-data e))))
    (/ n d)))

(rational->ext 2/3)
⇒ #<ext 0 #vu8(2 3)>

(ext->rational (ext 0 #vu8(2 3)))
⇒ 2/3
@end example

Of course our recipient must also be aware of our extension. In the above
example we pack the two components of our rational number as two integers and
unpack by binding the multiple return values of @code{unpack}.


@node MessagePack API
@chapter MessagePack API

All of the API is exposed via the @code{(msgpack)} module, which only serves to
re-export the binding from the more specific sub-modules. We can divide the
library into three tasks: packing data, unpacking data, and the auxiliary data
types provided for dealing with MessagePack data. The following sections
discuss these tasks and the associated modules.

@menu
* MessagePack types::  New types added to Guile
* Packing::            Serializing Guile objects
* Unpacking::          Deserializing MessagePack objects
@end menu


@node MessagePack types
@section MessagePack types

The MessagePack specification@footnote{
@uref{https://github.com/msgpack/msgpack/blob/master/spec.md}}
specifies which types the format supports. Most of these neatly map onto the
types provided by Guile out of the box, but there are two exceptions: the
@code{nil} object (nothingness) and the @code{ext} type (extensions to
MessagePack).


@subsection Nothingness

MessagePack indicates ``nothingness'' using the @code{nil} object. Guile lacks
an appropriate unambiguous object for this purpose; the usual @code{'()} could
be confused for a list with no contents, and @code{#f} is part of the boolean
type in MessagePack. For this purpose a new @code{nothing} object has been
introduced by this library.

The following bindings reside in the @code{(msgpack nothing)} module.

@deffn {Scheme procedure} nothing
Returns the @code{nothing} object. All calls to this function produce results
which are @code{eq?} to each other, meaning that this procedure returns a
singleton object.

@example
(define val1 (nothing))
(define val2 (nothing))

;; This always evaluates to '#t':
(eq? val1 val2)
⇒ #t
@end example
@end deffn

@deffn {Scheme procedure} nothing? object
Predicate for the @code{nothing} object, returns @code{#t} if @code{object} is
the @code{nothing} object, and @code{#f} otherwise.
@end deffn


@subsection Extension types

MessagePack allows for custom types to be defined via the @code{ext} type. An
extension is a tagged byte sequence: the tag is a signed 8-bit integer and the
data is an ordered sequence of bytes. Non-negative tag values are free to be
used for any purpose, but negative tag values are reserved for future extension
by MessagePack.

The following bindings reside in the @code{(msgpack ext)} module.

@deffn {Scheme procedure} ext type data
Produce a new instance of the @code{ext} record type. The @code{type} must be
an exact real integer in the range -128--127, and the @code{data} must be a
bytevector of less than @math{2@sup{32}} bytes (4GiB) in length.
@end deffn

@deffn {Scheme procedure} ext? object
Type predicate for @code{ext} objects. Returns @code{#t} if @code{object} is
an instance of @code{ext}, and @code{#f} otherwise.
@end deffn

@deffn {Scheme procedure} ext-type ext
Accessor for the @code{type} field of an @code{ext} object, returns an exact
integer.
@end deffn

@deffn {Scheme procedure} ext-data ext
Accessor for the @code{data} field of an @code{ext} object, returns a
bytevector.
@end deffn


@subsubsection Timestamp extension type

A timestamp is an extension object of type @math{-1}, it represents a time
duration consisting of nanoseconds and seconds. We represent a timestamp as a
UTC time object according to SRFI 19 (@pxref{SRFI-19 Time,,, guile}).

The specification allows only for times stamps with non-negative components,
the number of nanoseconds must not exceed the size of an unsigned 32-bit
integer, and the number of seconds must not exceed the size of an unsigned
64-bit integer.

Please note that the seconds and nanoseconds in a time object and an extension
object do not have to match exactly as long as they refer to the same time. One
second consists of one billion (milliard) nanoseconds, therefore one can
decrement the nanoseconds by one billion (milliard) and increment the seconds
by one, or vice-versa, without affecting the actual time value. When converting
time objects to extension objects, the format which takes up the least amount
of memory is chosen. When converting extension objects to time objects the
choice depends on the Guile implementation.

The following bindings reside in the @code{(msgpack ext timestamp)} module.

@deffn {Scheme procedure} ext->time ext
Return a time object from an extension object with a @code{type} of @code{-1}.
It is an error if the object has a different @code{type} or if its @code{data}
does not comply to the specification.
@end deffn

@deffn {Scheme procedure} time->ext time
Return a MessagePack extension object of @code{type} @math{-1} generated from
the SRFI-19 time object @code{time}. The smallest possible format will be
chosen. It is an error if the number of seconds or nanoseconds is outside the
ranged allowed by the specification.
@end deffn

The following example illustrates how to use these procedures:

@example
(time->ext (make-time time-utc 13 42))
⇒ #<ext -1 #vu8(0 0 0 #x34 0 0 0 #x2A)>

(ext->time (ext -1 #vu8(0 0 0 #x34 0 0 0 #x2A)))
⇒ #<time type: time-utc nanosecond: 13 second: 42>
@end example


@node Packing
@section Packing

The following bindings reside in the @code{(msgpack pack)} module. The Scheme
types map onto MessagePack types as follows:

@itemize @bullet
@item A @code{nothing} gets packed as @code{nil}

@item Both @code{#t} and @code{#f} get packed as boolean values

@item Real exact integers get packed as integers

@item Real numbers (including rationals) get packed as floating-point numbers,
the precision depends on the @code{float-precision} parameter

@item Strings get packed a text strings

@item Symbols get converted to strings and are then packed

@item Bytevectors get packed as binary strings

@item Vectors get packed as arrays

@item Hash tables get packed as maps

@item Extension objects get packed as @code{ext} objects

@item Time objects get packed as @code{ext} objects of type @code{-1}
@end itemize

If there is more than one possibility the first one applicable in the above
order is used. You can add your own rules using the @code{packing-table}
parameter.

@deffn {Scheme procedure} pack-to out [datum ...]
Pack each @code{datum} into the open binary output port @code{out}. If there
are multiple ways of packing a @code{datum} the smallest possible format will
be preferred. If the datum is a collection the packing procedure is called
recursively.

If a @code{datum} cannot be packed an exception will be raised. If the
@code{datum} can only be packed partially (for example if a vector contains an
unpackable object) an exception will be raised as well, but bytes might already
have been written to @code{out}.
@end deffn

@deffn {Scheme procedure} pack [datum ...]
Similar to @code{pack-to}, but instead of writing to a port return a bytevector
of the packed objects.
@end deffn

@deffn {Scheme parameter} packing-table
An association list of predicate-procedure pairs. When packing the predicate of
each entry (in order) is applied to @code{datum}, and if one of them returns
true its corresponding procedure is applied to @code{out} and @code{datum} to
pack @code{datum}. The @code{pack-to} and @code{pack} procedures terminate
after the first successfully matching predicate.

The procedure takes in an open binary input port and an object, it must always
write the data to the port even if you want to pack the object to a bytevector
rather than send it through a port. If you wish to pack objects inside a
packing procedure use @code{pack-to}.

This table is mainly useful for defining packing procedures for your own data
types. For example, if you wanted to pack @code{'()} as MessagePack's
@code{nil} rather than an empty list, you could write the following:

@example
(define (pack-null out datum)
  (pack-to out (nothing)))

(parameterize (packing-table (cons (cons null? pack-null)
                                   (packing-table))
  (pack '()))
⇒ #vu8(192)
@end example

Since the packing table is consulted in order, our new prepended entry will be
checked first before checking the remaining entries.
@end deffn

@deffn {Scheme parameter} float-precision
Either @code{'single} or @code{'double}, specifies the precision to use for
packing floating-point numbers. Defaults to double precision.
@end deffn


@node Unpacking
@section Unpacking

The following bindings reside in the @code{(msgpack unpack)} module. The
MessagePack types map onto Scheme types as follows:

@itemize @bullet
@item The @code{nil} object gets unpacked to an instance of @code{nothing}

@item Boolean objects get unpacked to @code{#t} or @code{#f}

@item Integers get unpacked to exact real integer numbers

@item Floating point numbers get unpacked to inexact real numbers

@item Strings get unpacked to strings

@item Binary strings get unpacked to bytevectors

@item Arrays get unpacked to vectors

@item Maps get unpacked to hash tables using @code{equal?} for key comparison

@item Extension objects get unpacked to @code{ext} objects

@item Extension objects of type @code{-1} get unpacked to @code{time} objects
@end itemize

I tried to chose mappings which preserve semantic meaning and use existing data
types, but of course no such mapping is perfect. If you disagree, I recommend
wrapping the @code{unpack-from} and @code{unpack} procedures like this:

@example
;; Unpack 'nil' as an empty list
(let ((datum (unpack-from (current-input-port))))
  (cond
    ((nothing? datum) '())
    (else datum)))
@end example

This wrapping can also be used to map @code{ext} objects onto whatever they are
meant to actually represent in your application.

@deffn {Scheme procedure} unpack-from in
Unpacks a single datum from the open binary input port @code{in} and returns
the unpacked object. If the object is a collection this  procedure is called
recursively.

If the port is empty, meaning that not a single byte could be read, the
exception @code{empty-port} will be thrown.

If an object could not be read fully an exception will be raised. Either
@code{unexpected-eof} if an entire object is missing from a collection (such as
an array) or another exception if an object could only be read partially.
@end deffn

@deffn {Scheme procedure} unpack bytes
Unpacks a all data from the bytevector @code{bytes} and returns the
unpacked objects (@pxref{Binding Multiple Values,,,guile}). If @code{bytes} is
empty, no objects will be returned.

The exceptions raised are the same as for @code{unpack-from}, except that
@code{empty-port} is never thrown; if the port is empty nothing will get
returned, but it is not an error.

@example
;; This bytevector has three objects packed in it
(define bv #vu8(#x01 #x02 #xA5 #x68 #x65 #x6C #x6C #x6F))

;; Bind the first value only
(define one (unpack bv))
one
⇒ 1

;; Bind all values (requires knowing how many there are)
(define-values (one two hello) (unpack bv))
one two hello
⇒ 1
⇒ 2
⇒ "hello"

;; Bind all values to a list (works with any amount)
(define-values objects (unpack bv))
objects
⇒ (1 2 "hello")
@end example
@end deffn


@node GNU Free Documentation License
@appendix GNU Free Documentation License

@include fdl-1.3.texi

@bye

